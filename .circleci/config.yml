# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  print_pipeline_id:
    description: "Print a CircleCI workflowID"
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}

# Use a package of configuration called an orb.
# orbs:
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
jobs:
  aws-cli-example:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: avtor
      - run: echo aws-cli --version
  
  
  print_workflow_id:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - print_pipeline_id
          
          
  print_hello:
    environment:
      WORD1: "hello"
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Print word "hello"
          command: |
            echo $WORD1


  print_world:
    environment:
      WORD2: "world"
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: return 1
          # name: Print word "world"
          # command: |
          #   echo $WORD2
           
      - run:
          name: Upload Failed Tests
          command: echo "Hello Error!"
          when: on_fail
  build:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - run:
          name: "echo an env var that is part of our project"
          command: |
            echo $MY_ENV_VAR

  save_hello_world_output:
    environment:
      WORD1: "Hello World"
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Save word "Hello World"
          command: echo "text $WORD to output here" > ~/output.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
          - output.txt
  create_infrastructure:
    working_directory: ~/Ansible/
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: avtor
      - run: 
          command: |
            aws cloudformation create-stack --stack-name ansible-circleci --template-body file://Ansible/template.yml  --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" --region $AWS_DEFAULT_REGION

  aws-cli-save-inventory-file:
    executor: aws-cli/default
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - aws-cli/setup:
          profile-name: avtor
      - run: 
          command: | 
            echo "[all]" > ~/inventory-6
            aws ec2 describe-instances --region=us-west-2 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/inventory-6
            cat ~/inventory-6
                  
      - persist_to_workspace:
          root: ~/
          paths:
          - ./inventory-6

  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Print the "Hello World" from workspace file
          command: cat ~/output.txt
            
  print_output_inventory_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Print inventory file from workspace 
          command: | 
            cat ~/inventory-6

# Orchestrate or schedule a set of jobs
workflows:
  test-env-vars:
    jobs:
      # - aws-cli-save-inventory-file:
      #     context: aws
      # - print_output_inventory_file:
      #     requires: [aws-cli-save-inventory-file]     
      - create_infrastructure:
          context: aws

    # jobs:
  #     # - print_workflow_id
  # Name the workflow "welcome"
  # welcome:
    # Run the welcome/run job in its own container
    # jobs:
      # - welcome/run
      # - print_hello 
      # - print_world
      #     requires: [print_hello]
    # - save_hello_world_output
        # requires: [save_hello_world_output]